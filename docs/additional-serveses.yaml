openapi: 3.0.0
info:
  title: Микросервис Дополнительных Услуг Коворкинга
  version: 1.0.0
  description: API для управления дополнительными услугами в коворкинге
servers:
  - url: 'https://coworking-api.example.com/additional-services '
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    RoleCheck:
      type: apiKey
      in: header
      name: X-User-Role
paths:
  /services:
    get:
      summary: Получение списка доступных услуг
      description: Возвращает список всех доступных дополнительных услуг
      operationId: getServices
      tags:
        - Дополнительные услуги
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      summary: Создание новой услуги
      description: Администратор может создать новую дополнительную услугу
      operationId: createService
      tags:
        - Дополнительные услуги
      security:
        - BearerAuth: []
        - RoleCheck: [ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: Услуга успешно создана
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Неверные данные в запросе
        '401':
          description: Unauthorized
        '403':
          description: Недостаточно прав
        '500':
          description: Internal Server Error
  /services/{serviceId}:
    get:
      summary: Получение информации о конкретной услуге
      description: Возвращает детальную информацию об услуге по её ID
      operationId: getServiceById
      tags:
        - Дополнительные услуги
      security:
        - BearerAuth: []
      parameters:
        - name: serviceId
          in: path
          description: Идентификатор услуги
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized
        '404':
          description: Услуга не найдена
        '500':
          description: Internal Server Error
    put:
      summary: Обновление информации об услуге
      description: Обновляет данные о дополнительной услуге (например, название, цену)
      operationId: updateService
      tags:
        - Дополнительные услуги
      security:
        - BearerAuth: []
        - RoleCheck: [ADMIN]
      parameters:
        - name: serviceId
          in: path
          description: Идентификатор услуги
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: Услуга успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Неверные данные в запросе
        '401':
          description: Unauthorized
        '403':
          description: Недостаточно прав
        '404':
          description: Услуга не найдена
        '500':
          description: Internal Server Error
    delete:
      summary: Удаление услуги
      description: Администратор может удалить дополнительную услугу
      operationId: deleteService
      tags:
        - Дополнительные услуги
      security:
        - BearerAuth: []
        - RoleCheck: [ADMIN]
      parameters:
        - name: serviceId
          in: path
          description: Идентификатор услуги
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Услуга успешно удалена
        '401':
          description: Unauthorized
        '403':
          description: Недостаточно прав
        '404':
          description: Услуга не найдена
        '500':
          description: Internal Server Error
  /orders:
    post:
      summary: Создание заказа на услугу
      description: Пользователь может заказать дополнительную услугу
      operationId: createOrder
      tags:
        - Заказы услуг
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Заказ успешно создан
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Неверные данные в запросе
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /orders/{orderId}:
    get:
      summary: Получение информации о заказе
      description: Возвращает детальную информацию о заказе по его ID
      operationId: getOrderById
      tags:
        - Заказы услуг
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          description: Идентификатор заказа
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Заказ не найден
        '500':
          description: Internal Server Error
    put:
      summary: Обновление статуса заказа
      description: Администратор может изменить статус заказа
      operationId: updateOrderStatus
      tags:
        - Заказы услуг
      security:
        - BearerAuth: []
        - RoleCheck: [ADMIN]
      parameters:
        - name: orderId
          in: path
          description: Идентификатор заказа
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Статус заказа успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Неверные данные в запросе
        '401':
          description: Unauthorized
        '403':
          description: Недостаточно прав
        '404':
          description: Заказ не найден
        '500':
          description: Internal Server Error
    delete:
      summary: Удаление заказа
      description: Администратор может удалить заказ
      operationId: deleteOrder
      tags:
        - Заказы услуг
      security:
        - BearerAuth: []
        - RoleCheck: [ADMIN]
      parameters:
        - name: orderId
          in: path
          description: Идентификатор заказа
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Заказ успешно удалён
        '401':
          description: Unauthorized
        '403':
          description: Недостаточно прав
        '404':
          description: Заказ не найден
        '500':
          description: Internal Server Error
  /payments:
    post:
      summary: Оплата заказа
      description: Пользователь может оплатить заказ на дополнительную услугу
      operationId: payOrder
      tags:
        - Платежи
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayOrderRequest'
      responses:
        '200':
          description: Платёж успешно обработан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Неверные данные в запросе
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
components:
  schemas:
    Service:
      type: object
      properties:
        id:
          type: integer
          description: Уникальный идентификатор услуги
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        availability:
          type: boolean
    CreateServiceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        availability:
          type: boolean
      required: [name, price, duration, availability]
    UpdateServiceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        availability:
          type: boolean
      required: [name, description, price, duration, availability]
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Уникальный идентификатор заказа
        userId:
          type: integer
          description: Идентификатор пользователя
        serviceId:
          type: integer
          description: Идентификатор услуги
        status:
          type: string
          description: Статус заказа
        paymentStatus:
          type: string
          description: Статус оплаты
        details:
          type: object
          description: Детали заказа
    CreateOrderRequest:
      type: object
      properties:
        userId:
          type: integer
        serviceId:
          type: integer
        details:
          type: object
      required: [userId, serviceId, details]
    UpdateOrderStatusRequest:
      type: object
      properties:
        status:
          type: string
        paymentStatus:
          type: string
      required: [status, paymentStatus]
    PayOrderRequest:
      type: object
      properties:
        orderId:
          type: integer
        paymentMethod:
          type: string
        required: [orderId, paymentMethod]
    Payment:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        amount:
          type: number
          format: float
        method:
          type: string
        status:
          type: string