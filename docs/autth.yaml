openapi: 3.0.0
info:
  title: Аутентификация коворкинга
  version: 1.0.0
  description: API для управления аутентификацией пользователей и администраторов

paths:
  /auth/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Некорректные данные
        '409':
          description: Пользователь уже существует

  /auth/login:
    post:
      summary: Авторизация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные

  /auth/refresh:
    post:
      summary: Обновление JWT-токена
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Токен обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Невалидный refresh-токен

  /auth/users/{userId}/activity:
    get:
      summary: Получение истории действий пользователя (только для администраторов)
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: История действий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserActivity'

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: ['USER', 'ADMIN']
      required: [firstName, lastName, email, password]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
        refreshToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        role:
          type: string
          enum: ['USER', 'ADMIN']

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string

    UserActivity:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        action:
          type: string
          example: "бронирование помещения"
        details:
          type: object

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT