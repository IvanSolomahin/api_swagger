openapi: 3.0.0
info:
  title: Coworking Network API
  version: 1.0.0
  description: API для управления сетью коворкингов

servers:
  - url: https://api.coworking.com/v1   
    description: Production server

tags:
  - name: Authentication
    description: Регистрация, авторизация и проверка токена
  - name: CoworkingSpaces
    description: Управление коворкингами
  - name: Inventory
    description: Учет товаров
  - name: Events
    description: Мероприятия
  - name: Bookings
    description: Бронирования
  - name: QR
    description: QR-коды доступа

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, space_admin, superadmin]
    
    CoworkingSpace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        city:
          type: string
          enum: [Moscow, London, NewYork]
        workstations:
          type: array
          items:
            $ref: '#/components/schemas/Workstation'
        parkingSlots:
          type: integer
          minimum: 0

    Workstation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [desk, meeting_room, lounge]

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT токен"
        refreshToken:
          type: string
          description: "Refresh токен"

    VerifyResponse:
      type: object
      properties:
        valid:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Автоматическая регистрация
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User created

  /auth/token:
    post:
      tags: [Authentication]
      summary: Получить JWT токен
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /auth/verify:
    get:
      tags: [Authentication]
      summary: Проверить токен
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Токен действителен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'

  /coworking-spaces:
    post:
      tags: [CoworkingSpaces]
      security:
        - BearerAuth: [space_admin]
      summary: Добавить коворкинг
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoworkingSpace'
      responses:
        '201':
          description: Coworking space created

  /inventory:
    patch:
      tags: [Inventory]
      summary: Обновить остатки
      parameters:
        - in: query
          name: spaceId
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coffee:
                  type: integer
                snacks:
                  type: integer

  /events:
    post:
      tags: [Events]
      summary: Создать мероприятие
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                date:
                  type: string
                  format: date-time

  /qr/generate:
    get:
      tags: [QR]
      summary: Генерировать QR-код
      parameters:
        - in: query
          name: userId
          required: true
        - in: query
          name: spaceId
          required: true
      responses:
        '200':
          content:
            image/png:
              schema: 
                type: string
                format: binary